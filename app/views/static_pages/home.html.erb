<div class="row">
    <div class="col-lg-4">
        <div class="well bs-component">
        <form class="form-horizontal">
          <fieldset>
            <div class="form-group">
              <label for="textArea" class="col-lg-2 control-label">Recipe</label>
              <div class="col-lg-10">
                <textarea class="form-control" rows="10" id="textArea">Eggplant Rougail = INGREDIENTS: 2 eggplants, 2 white onions, 2 hot peppers, 4 tsp oil, salt and pepper ; DO: 1. boil eggplants until soft; 2. scoop flesh from 1; 3. discard skin from 2; 4. mash 3; 5. mince white onions; 6. mince hot peppers; 7. mix 5, 6, 4; 8. add oil to 7; 9. add salt and pepper to 8; 10. serve 9</textarea>
                <span class="help-block">Syntax errors displayed here maybe?</span>
              </div>
            </div>
            <div class="form-group">
              <div class="col-lg-10 col-lg-offset-2">
                <input type="btn" onclick="drawGraph()" class="btn btn-warning" value="Visualize!">
              </div>
            </div>
          </fieldset>
        </form>
        </div>
    </div>
    <div class="col-lg-8">
        <div id="graph-container" style="height: 370px"> <!-- TODO: don't hardcode height -->
        </div>
    </div>
</div>



<script>
    // TODO: Add more colours here
    colors = [
        "#6E92A1",
        "#FFBAAA",
        "#FFE7AA",
        "#D4A26A",
        "#7AB793",
        "#FF847D",
        "#FFB06B",
        "#75caeb"
    ];

    function drawGraph() {
        // Clear the page
        document.getElementById("graph-container").innerHTML = "";
        document.getElementById("recipe-title").innerHTML = "";

        // Get recipe from the box
        var textArea = document.getElementById("textArea").value;

        // Parse
        var result = parse(textArea); // 

        // Interpret
        if (result != null) {
            var json = buildSigmaGraph(result);
            sigma.canvas.edges.t = function(edge, source, target, context, settings) {
                var color = edge.color,
                    prefix = settings('prefix') || '',
                    edgeColor = settings('edgeColor'),
                    defaultNodeColor = settings('defaultNodeColor'),
                    defaultEdgeColor = settings('defaultEdgeColor');

                context.strokeStyle = source.color;
                context.lineWidth = 9;
                context.beginPath();
                context.moveTo(
                    source[prefix + 'x'],
                    source[prefix + 'y']
                );
                context.lineTo(
                    target[prefix + 'x'],
                    source[prefix + 'y']
                );
                context.lineTo(
                    target[prefix + 'x'],
                    target[prefix + 'y']
                );
                context.stroke();
            };

            sigma.canvas.labels.square = function(node, context, settings) {
                var prefix = settings('prefix') || '',
                    size = node[prefix + 'size'],
                    nodeX = node[prefix + 'x'],
                    nodeY = node[prefix + 'y'],
                    textWidth;

                context.fillStyle = "black";
                context.lineWidth = size;
                context.textAlign = 'center';
                context.font = '12px Helvetica';
                context.fillText(node.label, nodeX, nodeY - 15); 
                context.fillText(node.constraints, nodeX, nodeY + 22);
                textWidth = context.measureText(node.label).width;
                node.labelWidth = textWidth;
            };


            sigma.canvas.nodes.square = function(node, context, settings) {
                var prefix = settings('prefix') || '',
                    size = node[prefix + 'size'];

                context.fillStyle = node.color || settings('defaultNodeColor');
                context.beginPath();
                context.rect(
                    node[prefix + 'x'] - size,
                    node[prefix + 'y'] - size,
                    size * 2,
                    size * 2
                );
                context.closePath();
                context.fill();
            };

            document.getElementById("recipe-title").innerHTML = result["recipe"]["title"];

            s = new sigma({
                graph: json,
                container: 'graph-container',
                renderer: {
                    container: document.getElementById('graph-container'),
                    type: 'canvas'
                },
                settings: {
                    edgeColor: 'default',
                    defaultNodeColor: '#27566B',
                    sideMargin: 0.5
                }
            });

            //s.startForceAtlas2();
            s.start
        } else {
            document.getElementById("recipe-title").innerHTML = "The recipe you entered is invalid.";
        }

    }
</script>