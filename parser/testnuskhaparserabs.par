/~ --- Token definitions --- ~/
[*
var ID_NUM = 1;
var h = new Object;
var STEP_NUM = 1;
var nuskha_result = new Object;

function getId()
{
    vid = ID_NUM++;
    return vid;
}
 function createIngredient(name,description)
 {
     h[name[0]] = ID_NUM;
     if (name[1] == null) {
        if (description == null) {
            return {"id": getId(), "type": "ingredient", "time": 0, "label": name[0], "ingr": []};
        } else {
            return {"id": getId(), "type": "ingredient", "time": 0, "label": name[0], "ingr": [], "description": description};
        }
     } else {
        if (description == null) {
            return {"id": getId(), "type": "ingredient", "time": 0, "label": name[0], "ingr": [], "constraints": [name[1]]};
        } else {
            return {"id": getId(), "type": "ingredient", "time": 0, "label": name[0], "ingr": [], "description": description, "constraints": [name[1]]};
        }
     }
 }
 function createAction(ingr,constraints)
 {
     time = STEP_NUM++;
     if (constraints == null) {
     return {"id": getId(), "type": "action", "time": time, "label": ingr[0], "ingr": ingr[1]};
     } else {
     return {"id": getId(), "type": "action", "time": time, "label": ingr[0], "ingr": ingr[1], "constraints": constraints};
     }
 }
function setHash(key)
 {
     h[key] = ID_NUM;
 }
function setNuskha(obj)
{
    nuskha_result = obj;
}
*]

/~ Characters to be ignored ~/
!   ' |\t\n' ;

/~ Non-associative tokens ~/
    'INGREDIENTS:'
    'DO:'
    'with'
    'on'
    'to'
    'until'
    'tsp'
    'tbsp'
    'cup'
    'from'
    'for'
    'into'
    'at'
    '[A-Za-z]+'                        STRING      
    '[0-9]+(\.[0-9]+)?'                NUMBER
    '[0-9]+C'                          TEMPC
    '[0-9]+F'                          TEMPF
    '[0-9]+\.'                         STEP        [* %match = setHash(%match.substring(0,%match.length - 1)); *]
    ;

>  '\='
   '\(';
/~ Left-associative tokens, lowest precedence ~/
<  '\;'
   '\,'
   '\)';
##

/~ --- Grammar specification --- ~/

nuskha:         ing '=' instructions              [* %% = setNuskha({"recipe": {"title": %1 }, "graph": %3}); *]
                | ing '(' ing ')' '=' instructions  [*  %% = setNuskha({"recipe": {"title": %1, "style": %3}, "graph": %6}); *]
                ;

instructions:   'INGREDIENTS:' ingrs ';' 'DO:' steps        [* %% = %2.concat(%5); *]
                ;

ingrs:          ingrs ',' ingrs         [* %% = %1.concat(%3); *]
                | ingr         [* %% = [createIngredient(%1,null)]; *]
                | ingr '(' ing ')'     [* %% = [createIngredient(%1,%3)]; *]
                ;

ingr:           NUMBER ing   [* %% = [%2, {"amount": %1.toString()}]; *]
                | NUMBER measurement ing [* %% = [%3, {"amount": %1.toString() + " " + %2}]; *]
                | ing        [* %% = [%1, null]; *]
                ;

measurement:    'tsp'
                | 'tbsp'
                | 'cup'
                ;

steps:          steps ';' steps         [* %% = %1.concat(%3); *]
                | STEP step             [* %% = [%2]; *]
                ;

step:           action                  [* %% = createAction(%1, null); *]
                | action modifier       [* %% = createAction(%1, %2); *]
                ;

action:         STRING item                [* %% = [%1, %2]; *]
                | STRING item 'to' item      [* %% = [%1, %2.concat(%4)]; *]
                | STRING STRING 'from' item  [* %% = [%1 + " " + %2, %4]; *]
                ;

modifier:       modifier modifier      [* %% = %1.concat(%2); *]
                | 'with' STRING       [* %% = [{"utensil": %2}]; *]
                | 'on' STRING       [* %% = [{"location": %2}]; *]
                | 'until' STRING    [* %% = [{"fulfill": %2}]; *]
                | 'for' time        [* %% = [{"duration": %2}]; *]
                | 'into' STRING     [* %% = [{"shape": %2}]; *]
                | 'at' temp         [* %% = [{"temp": %2}]; *]
                | '(' ing ')'       [* %% = [{"instruction": %2}]; *]
                ;

time:           NUMBER STRING       [* %% = %1 + " " + %2; *]
                ;

temp:           TEMPC
                | TEMPF
                | STRING
                ;

item:           item ',' item [* %% = %1.concat(%3); *]
                | NUMBER     [* %% = [h[%1.toString()]]; *]
                | ing   [* %% = [h[%1]]; *]
                ;

ing:            STRING  [* %% = %1; *]
                | STRING ing [* %% = %1 + " " + %2; *]
                ;

/~
    This is the parser entry point; Because this entry point could be
    very individual, the compiler programmer has to decide which way
    he want to read the source, parse it and report the errors, if
    there are any.
~/
[*
var error_offsets = new Array();
var error_lookaheads = new Array();
var error_count = 0;

/* Switching one of these variables on will enable debug facilities
    of the various parser drivers */
//##PREFIX##_dbg_withtrace = true;
//##PREFIX##_dbg_withparsetree = true;
//##PREFIX##_dbg_withstepbystep = true;

var str = arguments[0];

if( ( error_count = __##PREFIX##parse( str,
    error_offsets, error_lookaheads ) ) > 0 )
{
    for( var i = 0; i < error_count; i++ )
        print( "Parse error near \"" 
                + str.substr( error_offsets[i] ) +
                    "\", expecting \"" +
                        error_lookaheads[i].join() +
                            "\"" );
}
*]